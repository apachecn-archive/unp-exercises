/*
 * BSD-specific.
 */
/*
 * =============================================================================
 *
 *       Filename:  getrt.c
 *
 *    Description:  send command RTM_GET by route socket. figure 18-6,
 *		    page 387.
 *
 *        Version:  1.0
 *        Created:  03/28/2015 02:39:29 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  YOUR NAME (), 
 *   Organization:  
 *
 * =============================================================================
 */

#include "unproute.h"

#define BUFLEN (sizeof(struct rt_msghdr) + 512)
#define SEQ	9999

int main(int argc, char *argv[])
{
	int	sockfd;
	char	*buf;
	pid_t	pid;
	ssize_t	n;
	struct rt_msghdr *rtm;
	struct sockaddr *sa, *rti_info[RTAX_MAX];
	struct sockaddr_in *sin;

	if (argc != 2)
		err_quit("usage: getrt <IPaddress>");

	/* need super user privilege */
	if ((sockfd = socket(AF_ROUTE, SOCK_RAW, 0)) < 0)
		err_sys("socket error");

	if ((buf = calloc(1, BUFLEN)) == NULL)
		err_sys("calloc error");
	
	rtm = (struct rt_msghdr *)buf;
	rtm->rtm_msglen	= sizeof(struct rt_msghdr) + sizeof(struct sockaddr_in);
	rtm->rtm_version = RTM_VERSION;
	rtm->rtm_type	= RTM_GET;
	rtm->rtm_addrs	= RTA_DST;
	rtm->rtm_pid	= pid = getpid();
	rtm->rtm_seq	= SEQ;

	sin = (struct sockaddr_in *)(rtm + 1);
	sin->sin_len	= sizeof(struct sockaddr_in);
	sin->sin_family	= AF_INET;
	if (inet_pton(AF_INET, argv[1], &sin->sin_addr) < 0)
		err_sys("inet_pton error");

	if (write(sockfd, rtm, rtm->rtm_msglen) < rtm->rtm_msglen)
		err_sys("write error");
	do {
		if ((n = read(sockfd, rtm, BUFLEN)) < 0)
			err_sys("read error");
	} while (rtm->rtm_type != RTM_GET || rtm->rtm_seq != SEQ ||
			rtm->rtm_pid != pid);

	rtm = (struct rt_msghdr *)buf;
	sa = (struct sockaddr *)(trm + 1);
	get_rtaddrs(rtm->rtm_addrs, sa, rti_info);
	if ((sa = rti_info[RTAX_DST]) != NULL)
		printf("dest: %s\n", sock_ntop_host(sa, sa->sa_len));
	if ((sa = rti_info[RTAX_GATEWAY]) != NULL)
		printf("gateway: %s\n", sock_ntop_host(sa, sa->sa_len));
	if ((sa = rti_info[RTAX_NETMAX]) != NULL)
		printf("netmask: %s\n", sock_masktop(sa, sa->sa_len));
	if ((sa = rti_info[RTAX_GENMASK]) != NULL)
		printf("genmask: %s\n", sock_masktop(sa, sa->sa_len));

	exit(0);
}
